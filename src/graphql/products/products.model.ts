// import pool from "../../pool";
// import { createWriteStream, existsSync, mkdirSync } from "fs";
// import { product } from "../../types/product.type";
// const query = pool.prototype.query;
// const getAllProducts = async () => {
//   const getproducts = await query(`SELECT * FROM products`);
//   return getproducts.rows;
// };
// const getproductsByCategory = async (category_id: string) => {
//   const getproductsByCategory = await query(
//     ` SELECT *
//   FROM products
//   JOIN categories ON products.category_id = categories.category_id
//   WHERE categories.category_id = $1`,
//     [category_id]
//   );
//   return getproductsByCategory.rows;
// };

// const setProduct = async (
//   name,
//   description,
//   price,
//   image,
//   category_id,
//   quantity
// ) => {
//   const { createReadStream, filename } = await image;
//   await new Promise((res) =>
//     createReadStream()
//       .pipe(createWriteStream(path.join(__dirname, "../images", filename)))
//       .on("close", res)
//   );
//   existsSync(path.join(__dirname, "../images")) ||
//     mkdirSync(path.join(__dirname, "../images"));

//   // Remove product_id from input, as it will be generated by the database
//   const SetProduct = await query(
//     `INSERT INTO products (name, description, price, image, category_id, quantity) VALUES ($1,$2,$3,$4,$5,$6) RETURNING *`,
//     [name, description, price, filename, category_id, quantity]
//   );

//   // Return the inserted product object, including the generated product_id
//   return SetProduct.rows[0];
// };
